{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### loading principal package "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 444,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import matplotlib.pyplot as plt \n",
    "import pandas as pd\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### loading original building file : overview all dataset "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 447,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>EPC_ID</th>\n",
       "      <th>Organization_Name</th>\n",
       "      <th>Public_Building_Type</th>\n",
       "      <th>Public_Building_Category</th>\n",
       "      <th>Construction_Year</th>\n",
       "      <th>Refurbishment_Year</th>\n",
       "      <th>Building_Age</th>\n",
       "      <th>Useful_Floor_Area [m2]</th>\n",
       "      <th>EPC_Score</th>\n",
       "      <th>Energy_Carrier_Electricity</th>\n",
       "      <th>...</th>\n",
       "      <th>ONDERWIJS_AANTAL_LLN</th>\n",
       "      <th>ONDERWIJS_AANTAL_M2_SPORTHAL</th>\n",
       "      <th>ONDERWIJS_AANTAL_M2_ZWEMBAD</th>\n",
       "      <th>ONDERWIJS_AANTAL_MAALTIJDEN</th>\n",
       "      <th>OPVANG_AANTAL_KINDEREN</th>\n",
       "      <th>RUSTHUIS_AANTAL_BEDDEN</th>\n",
       "      <th>RUSTHUIS_SERVICEFLATS</th>\n",
       "      <th>ZIEKENHUIS_AANTAL_BEDDEN</th>\n",
       "      <th>ZWEMBAD_WATEROPPERVLAKTE</th>\n",
       "      <th>ZWEMBAD_SUBTROPISCH</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>Vrije Basisschool VIEJOOL</td>\n",
       "      <td>primary school</td>\n",
       "      <td>eductional buildings</td>\n",
       "      <td>1953</td>\n",
       "      <td>NaN</td>\n",
       "      <td>66</td>\n",
       "      <td>1278.00</td>\n",
       "      <td>165.87</td>\n",
       "      <td>electricity</td>\n",
       "      <td>...</td>\n",
       "      <td>208.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>BuBaO De Berkjes</td>\n",
       "      <td>primary school</td>\n",
       "      <td>eductional buildings</td>\n",
       "      <td>1997</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22</td>\n",
       "      <td>1088.05</td>\n",
       "      <td>120.70</td>\n",
       "      <td>electricity</td>\n",
       "      <td>...</td>\n",
       "      <td>44.0</td>\n",
       "      <td>288.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>21</td>\n",
       "      <td>Vlerick</td>\n",
       "      <td>higher education and universities</td>\n",
       "      <td>eductional buildings</td>\n",
       "      <td>1920</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>99</td>\n",
       "      <td>11178.00</td>\n",
       "      <td>409.14</td>\n",
       "      <td>electricity</td>\n",
       "      <td>...</td>\n",
       "      <td>5225.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>140.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>22</td>\n",
       "      <td>Vlerick Leuven</td>\n",
       "      <td>higher education and universities</td>\n",
       "      <td>eductional buildings</td>\n",
       "      <td>1920</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>99</td>\n",
       "      <td>4457.00</td>\n",
       "      <td>392.77</td>\n",
       "      <td>electricity</td>\n",
       "      <td>...</td>\n",
       "      <td>2075.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>150.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>42</td>\n",
       "      <td>Sint-Jozefsinstituut</td>\n",
       "      <td>secondary school</td>\n",
       "      <td>eductional buildings</td>\n",
       "      <td>1946</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>73</td>\n",
       "      <td>18424.10</td>\n",
       "      <td>123.78</td>\n",
       "      <td>electricity</td>\n",
       "      <td>...</td>\n",
       "      <td>1659.0</td>\n",
       "      <td>948.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>53.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 41 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   EPC_ID          Organization_Name               Public_Building_Type  \\\n",
       "0       2  Vrije Basisschool VIEJOOL                     primary school   \n",
       "1       5           BuBaO De Berkjes                     primary school   \n",
       "2      21                    Vlerick  higher education and universities   \n",
       "3      22             Vlerick Leuven  higher education and universities   \n",
       "4      42       Sint-Jozefsinstituut                   secondary school   \n",
       "\n",
       "  Public_Building_Category  Construction_Year  Refurbishment_Year  \\\n",
       "0     eductional buildings               1953                 NaN   \n",
       "1     eductional buildings               1997                 NaN   \n",
       "2     eductional buildings               1920              2005.0   \n",
       "3     eductional buildings               1920              2005.0   \n",
       "4     eductional buildings               1946              2000.0   \n",
       "\n",
       "   Building_Age  Useful_Floor_Area [m2]  EPC_Score Energy_Carrier_Electricity  \\\n",
       "0            66                 1278.00     165.87                electricity   \n",
       "1            22                 1088.05     120.70                electricity   \n",
       "2            99                11178.00     409.14                electricity   \n",
       "3            99                 4457.00     392.77                electricity   \n",
       "4            73                18424.10     123.78                electricity   \n",
       "\n",
       "          ...           ONDERWIJS_AANTAL_LLN ONDERWIJS_AANTAL_M2_SPORTHAL  \\\n",
       "0         ...                          208.0                          NaN   \n",
       "1         ...                           44.0                        288.0   \n",
       "2         ...                         5225.0                          NaN   \n",
       "3         ...                         2075.0                          NaN   \n",
       "4         ...                         1659.0                        948.0   \n",
       "\n",
       "   ONDERWIJS_AANTAL_M2_ZWEMBAD ONDERWIJS_AANTAL_MAALTIJDEN  \\\n",
       "0                          NaN                         NaN   \n",
       "1                          NaN                         NaN   \n",
       "2                          NaN                       140.0   \n",
       "3                          NaN                       150.0   \n",
       "4                          NaN                        53.0   \n",
       "\n",
       "   OPVANG_AANTAL_KINDEREN RUSTHUIS_AANTAL_BEDDEN  RUSTHUIS_SERVICEFLATS  \\\n",
       "0                     NaN                    NaN                    NaN   \n",
       "1                     NaN                    NaN                    NaN   \n",
       "2                     NaN                    NaN                    NaN   \n",
       "3                     NaN                    NaN                    NaN   \n",
       "4                     NaN                    NaN                    NaN   \n",
       "\n",
       "  ZIEKENHUIS_AANTAL_BEDDEN ZWEMBAD_WATEROPPERVLAKTE  ZWEMBAD_SUBTROPISCH  \n",
       "0                      NaN                      NaN                  NaN  \n",
       "1                      NaN                      NaN                  NaN  \n",
       "2                      NaN                      NaN                  NaN  \n",
       "3                      NaN                      NaN                  NaN  \n",
       "4                      NaN                      NaN                  NaN  \n",
       "\n",
       "[5 rows x 41 columns]"
      ]
     },
     "execution_count": 447,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_excel('EPC_Public.xlsx', sheetname='no_error')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The variable 'Building_Age','Useful_Floor_Area' and 'EPC_Score' are important to the simulate future. \n",
    "so the analysis is mainly around these varaibles. \n",
    "\n",
    "Firstly, we want to get the clustering for dataset in each 'public_building_category'\n",
    "secondly, we want to try also the clustering of dataset in each 'public_building_type' .\n",
    "and then idealy, we want to construct the model for the public_building_categrory. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's start with extract the data for the public_building_category. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 448,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>EPC_ID</th>\n",
       "      <th>Public_Building_Type</th>\n",
       "      <th>Public_Building_Category</th>\n",
       "      <th>Building_Age</th>\n",
       "      <th>Useful_Floor_Area [m2]</th>\n",
       "      <th>EPC_Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>primary school</td>\n",
       "      <td>eductional buildings</td>\n",
       "      <td>66</td>\n",
       "      <td>1278.00</td>\n",
       "      <td>165.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>primary school</td>\n",
       "      <td>eductional buildings</td>\n",
       "      <td>22</td>\n",
       "      <td>1088.05</td>\n",
       "      <td>120.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>21</td>\n",
       "      <td>higher education and universities</td>\n",
       "      <td>eductional buildings</td>\n",
       "      <td>99</td>\n",
       "      <td>11178.00</td>\n",
       "      <td>409.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>22</td>\n",
       "      <td>higher education and universities</td>\n",
       "      <td>eductional buildings</td>\n",
       "      <td>99</td>\n",
       "      <td>4457.00</td>\n",
       "      <td>392.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>42</td>\n",
       "      <td>secondary school</td>\n",
       "      <td>eductional buildings</td>\n",
       "      <td>73</td>\n",
       "      <td>18424.10</td>\n",
       "      <td>123.78</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   EPC_ID               Public_Building_Type Public_Building_Category  \\\n",
       "0       2                     primary school     eductional buildings   \n",
       "1       5                     primary school     eductional buildings   \n",
       "2      21  higher education and universities     eductional buildings   \n",
       "3      22  higher education and universities     eductional buildings   \n",
       "4      42                   secondary school     eductional buildings   \n",
       "\n",
       "   Building_Age  Useful_Floor_Area [m2]  EPC_Score  \n",
       "0            66                 1278.00     165.87  \n",
       "1            22                 1088.05     120.70  \n",
       "2            99                11178.00     409.14  \n",
       "3            99                 4457.00     392.77  \n",
       "4            73                18424.10     123.78  "
      ]
     },
     "execution_count": 448,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_use_o = df.loc[:,['EPC_ID','Public_Building_Type','Public_Building_Category','Building_Age','Useful_Floor_Area [m2]','EPC_Score']]\n",
    "data_use_o.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### extract the original 'type' data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 449,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Building_Age</th>\n",
       "      <th>EPC_Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>66</td>\n",
       "      <td>165.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22</td>\n",
       "      <td>120.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>59</td>\n",
       "      <td>108.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>50</td>\n",
       "      <td>142.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>69</td>\n",
       "      <td>163.63</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Building_Age  EPC_Score\n",
       "0             66     165.87\n",
       "1             22     120.70\n",
       "31            59     108.26\n",
       "32            50     142.60\n",
       "43            69     163.63"
      ]
     },
     "execution_count": 449,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_type_prime_school_o = data_use_o.loc[data_use_o['Public_Building_Type']=='primary school',['Building_Age','EPC_Score']]\n",
    "data_type_prime_school_o.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### extract the original 'category' data "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "extract the educational buildings data from original category data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 450,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Building_Age</th>\n",
       "      <th>EPC_Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>66</td>\n",
       "      <td>165.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22</td>\n",
       "      <td>120.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>99</td>\n",
       "      <td>409.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>99</td>\n",
       "      <td>392.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>73</td>\n",
       "      <td>123.78</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Building_Age  EPC_Score\n",
       "0            66     165.87\n",
       "1            22     120.70\n",
       "2            99     409.14\n",
       "3            99     392.77\n",
       "4            73     123.78"
      ]
     },
     "execution_count": 450,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_category_edu_o = data_use_o.loc[data_use_o['Public_Building_Category']=='eductional buildings',['Building_Age','EPC_Score']]\n",
    "data_category_edu_o.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### data for model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 451,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_for_model_o = data_type_prime_school_o"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "let's see the distribution of each variable just for the category education buildings from original data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 452,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Building_Age</th>\n",
       "      <th>EPC_Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1996.000000</td>\n",
       "      <td>1996.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>74.781563</td>\n",
       "      <td>172.312720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>44.196943</td>\n",
       "      <td>139.197402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>10.430000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>117.812500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>65.500000</td>\n",
       "      <td>152.450000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>96.000000</td>\n",
       "      <td>198.875000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>908.000000</td>\n",
       "      <td>4931.710000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Building_Age    EPC_Score\n",
       "count   1996.000000  1996.000000\n",
       "mean      74.781563   172.312720\n",
       "std       44.196943   139.197402\n",
       "min        5.000000    10.430000\n",
       "25%       50.000000   117.812500\n",
       "50%       65.500000   152.450000\n",
       "75%       96.000000   198.875000\n",
       "max      908.000000  4931.710000"
      ]
     },
     "execution_count": 452,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_for_model_o.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 453,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a22004e48>"
      ]
     },
     "execution_count": 453,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#pd.options.display.mpl_style = 'default'\n",
    "data_for_model_o.boxplot()\n",
    "#plt.title(\"Education building original data\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 454,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x1a1ed9ddd8>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x1a221a1c50>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 454,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_for_model_o.hist()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### standard data processing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "let's stardalize the data and see the result below "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 455,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Building_Age_norm</th>\n",
       "      <th>EPC_Score_norm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.198741</td>\n",
       "      <td>-0.046296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1.194535</td>\n",
       "      <td>-0.370881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.357163</td>\n",
       "      <td>-0.460273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.560848</td>\n",
       "      <td>-0.213511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.130846</td>\n",
       "      <td>-0.062393</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Building_Age_norm  EPC_Score_norm\n",
       "0          -0.198741       -0.046296\n",
       "1          -1.194535       -0.370881\n",
       "2          -0.357163       -0.460273\n",
       "3          -0.560848       -0.213511\n",
       "4          -0.130846       -0.062393"
      ]
     },
     "execution_count": 455,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import preprocessing\n",
    "data_for_model_norm = pd.DataFrame(preprocessing.scale(data_for_model_o))\n",
    "#data_o_category_edu_norm = (data_o_category_edu - data_o_category_edu.min()) / (data_o_category_edu.max() - data_o_category_edu.min())\n",
    "data_for_model_norm.columns = data_for_model_o.columns  + '_norm'\n",
    "data_for_model_norm.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 456,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Building_Age_norm</th>\n",
       "      <th>EPC_Score_norm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.996000e+03</td>\n",
       "      <td>1.996000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4.177242e-17</td>\n",
       "      <td>-8.212647e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.000251e+00</td>\n",
       "      <td>1.000251e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-1.579273e+00</td>\n",
       "      <td>-1.163264e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-5.608481e-01</td>\n",
       "      <td>-3.916300e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>-2.100573e-01</td>\n",
       "      <td>-1.427304e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>4.802086e-01</td>\n",
       "      <td>1.908724e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.885712e+01</td>\n",
       "      <td>3.420028e+01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Building_Age_norm  EPC_Score_norm\n",
       "count       1.996000e+03    1.996000e+03\n",
       "mean        4.177242e-17   -8.212647e-17\n",
       "std         1.000251e+00    1.000251e+00\n",
       "min        -1.579273e+00   -1.163264e+00\n",
       "25%        -5.608481e-01   -3.916300e-01\n",
       "50%        -2.100573e-01   -1.427304e-01\n",
       "75%         4.802086e-01    1.908724e-01\n",
       "max         1.885712e+01    3.420028e+01"
      ]
     },
     "execution_count": 456,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_for_model_norm.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 457,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x1a27262cc0>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x1a218eefd0>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 457,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_for_model_norm.boxplot()\n",
    "#plt.title(\"Education building standard data\")\n",
    "data_for_model_norm.hist()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### comparison the outlier of original data and standard data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 458,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,1,'Building_Age_norm')"
      ]
     },
     "execution_count": 458,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "age1 = data_for_model_o.iloc[:,0]\n",
    "age2 = data_for_model_norm.iloc[:,0]\n",
    "\n",
    "#plt.boxplot(age2)\n",
    "fig, axs = plt.subplots(1, 2)\n",
    "axs[0].boxplot(age1)\n",
    "axs[0].set_title(age1.name)\n",
    "axs[1].boxplot(age2)\n",
    "axs[1].set_title(age2.name)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "we can find drectly the values in before and after boxplot are the same distribution. so let's processing the outlier values based on the boxplot."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### what's boxplot?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "we can find drectly the values in before and after boxplot are the same distribution. \n",
    "so let's processing the outlier values based on the boxplot. \n",
    "\n",
    "what's boxplot? \n",
    "boxplot is a method for graphically depicting groups of numerical data through their quartiles. Box plots may also have lines extending vertically from the boxes (whiskers) indicating variability outside the upper and lower quartiles, hence the terms box-and-whisker plot and box-and-whisker diagram.\n",
    "\n",
    "In addition to the points themselves, they allow one to visually estimate various L-estimators, notably the interquartile range, midhinge, range, mid-range, and trimean.\n",
    "\n",
    "interquartile range (IQR):is a measure of statistical dispersion, being equal to the difference between 75th and 25th percentiles,or between upper and lower quartiles. IQR = Q3 âˆ’  Q1\n",
    "lowest datum still within 1.5 IQR of the lower quartile, and the highest datum still within 1.5 IQR of the upper quartile \n",
    "Q1-1.5IQR\n",
    "Q1 = %25\n",
    "Q3 = %75\n",
    "Q3 + 1.5*IQR\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "use the value percentile and boxplot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 459,
   "metadata": {},
   "outputs": [],
   "source": [
    "Q1_Q3 = data_for_model_o.quantile([0.25,0.75]).as_matrix()\n",
    "Q1 = Q1_Q3[0]\n",
    "Q3 = Q1_Q3[1]\n",
    "\n",
    "IQR = Q3 - Q1\n",
    "outlier_Q1 = Q1 - 1.5*IQR\n",
    "outlier_Q3 = Q3 + 1.5*IQR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 460,
   "metadata": {},
   "outputs": [],
   "source": [
    "#outlier for 3 index \n",
    "#outlier = (data_for_model_o['Useful_Floor_Area [m2]']<outlier_Q1[1])|(data_for_model_o['Useful_Floor_Area [m2]']>outlier_Q3[1])|(data_for_model_o['EPC_Score']>outlier_Q3[2])|(data_for_model_o['EPC_Score']<outlier_Q1[2])|(data_for_model_o['Building_Age']<outlier_Q1[0])|(data_for_model_o['Building_Age']>outlier_Q3[0])\n",
    "#outlier_index = data_for_model_o[outlier].index\n",
    "\n",
    "#outlier for 2 index\n",
    "outlier = (data_for_model_o['EPC_Score']>outlier_Q3[1])|(data_for_model_o['EPC_Score']<outlier_Q1[1])|(data_for_model_o['Building_Age']<outlier_Q1[0])|(data_for_model_o['Building_Age']>outlier_Q3[0])\n",
    "outlier_index = data_for_model_o[outlier].index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 461,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_for_model_o_drop = data_for_model_o\n",
    "data_for_model_o_drop = data_for_model_o_drop.drop(outlier_index,axis=0)\n",
    "#data_for_model_o_drop.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "standarlize the data after delete outline "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 462,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Building_Age_norm_drop</th>\n",
       "      <th>EPC_Score_norm_drop</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.185277</td>\n",
       "      <td>0.147472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1.530031</td>\n",
       "      <td>-0.667407</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.399215</td>\n",
       "      <td>-0.891828</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.674279</td>\n",
       "      <td>-0.272325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.093590</td>\n",
       "      <td>0.107062</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Building_Age_norm_drop  EPC_Score_norm_drop\n",
       "0               -0.185277             0.147472\n",
       "1               -1.530031            -0.667407\n",
       "2               -0.399215            -0.891828\n",
       "3               -0.674279            -0.272325\n",
       "4               -0.093590             0.107062"
      ]
     },
     "execution_count": 462,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_for_model_norm_drop = pd.DataFrame(preprocessing.scale(data_for_model_o_drop))\n",
    "data_for_model_norm_drop.columns = data_for_model_o.columns  + '_norm_drop'\n",
    "data_for_model_norm_drop.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 463,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "    #T_f2897eb4_6eb0_11e9_bb5d_f45c89cda5bfrow0_col0 {\n",
       "            background-color:  #b40426;\n",
       "        }    #T_f2897eb4_6eb0_11e9_bb5d_f45c89cda5bfrow0_col1 {\n",
       "            background-color:  #3b4cc0;\n",
       "        }    #T_f2897eb4_6eb0_11e9_bb5d_f45c89cda5bfrow1_col0 {\n",
       "            background-color:  #3b4cc0;\n",
       "        }    #T_f2897eb4_6eb0_11e9_bb5d_f45c89cda5bfrow1_col1 {\n",
       "            background-color:  #b40426;\n",
       "        }</style>  \n",
       "<table id=\"T_f2897eb4_6eb0_11e9_bb5d_f45c89cda5bf\" > \n",
       "<thead>    <tr> \n",
       "        <th class=\"blank level0\" ></th> \n",
       "        <th class=\"col_heading level0 col0\" >Building_Age_norm_drop</th> \n",
       "        <th class=\"col_heading level0 col1\" >EPC_Score_norm_drop</th> \n",
       "    </tr></thead> \n",
       "<tbody>    <tr> \n",
       "        <th id=\"T_f2897eb4_6eb0_11e9_bb5d_f45c89cda5bflevel0_row0\" class=\"row_heading level0 row0\" >Building_Age_norm_drop</th> \n",
       "        <td id=\"T_f2897eb4_6eb0_11e9_bb5d_f45c89cda5bfrow0_col0\" class=\"data row0 col0\" >1</td> \n",
       "        <td id=\"T_f2897eb4_6eb0_11e9_bb5d_f45c89cda5bfrow0_col1\" class=\"data row0 col1\" >0.00481364</td> \n",
       "    </tr>    <tr> \n",
       "        <th id=\"T_f2897eb4_6eb0_11e9_bb5d_f45c89cda5bflevel0_row1\" class=\"row_heading level0 row1\" >EPC_Score_norm_drop</th> \n",
       "        <td id=\"T_f2897eb4_6eb0_11e9_bb5d_f45c89cda5bfrow1_col0\" class=\"data row1 col0\" >0.00481364</td> \n",
       "        <td id=\"T_f2897eb4_6eb0_11e9_bb5d_f45c89cda5bfrow1_col1\" class=\"data row1 col1\" >1</td> \n",
       "    </tr></tbody> \n",
       "</table> "
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x1a27262c50>"
      ]
     },
     "execution_count": 463,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr = data_for_model_norm_drop.corr()\n",
    "corr.style.background_gradient(cmap='coolwarm')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### data for the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 464,
   "metadata": {},
   "outputs": [],
   "source": [
    "r = data_for_model_norm_drop"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### show all the distribution standard data 3D - 3index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 427,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "single positional indexer is out-of-bounds",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-427-e4e7d619dcfc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mAxes3D\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'b'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_xlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_ylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1470\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1471\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1472\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1473\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1474\u001b[0m             \u001b[0;31m# we by definition only have the 0th axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   2011\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2012\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2013\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_has_valid_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2014\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2015\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_lowerdim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_has_valid_tuple\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    220\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mIndexingError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Too many indexers'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    221\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 222\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    223\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    224\u001b[0m                 raise ValueError(\"Location based indexing can only have \"\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_validate_key\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1955\u001b[0m             \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1956\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1957\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1958\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1959\u001b[0m             \u001b[0;31m# a tuple should already have been caught by this point\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_validate_integer\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   2007\u001b[0m         \u001b[0ml\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2008\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0ml\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2009\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"single positional indexer is out-of-bounds\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2010\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2011\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mIndexError\u001b[0m: single positional indexer is out-of-bounds"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "fig = plt.figure()\n",
    "ax = Axes3D(fig)\n",
    "ax.scatter(r.iloc[:,0],r.iloc[:,1],r.iloc[:,2],s=50,c='b')\n",
    "ax.set_xlabel(r.columns[0])\n",
    "ax.set_ylabel(r.columns[1])\n",
    "ax.set_zlabel(r.columns[2])\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### show all the distribution standard data 2D - 2index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 437,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(*args, **kw)>"
      ]
     },
     "execution_count": 437,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.scatter(r.iloc[:,0],r.iloc[:,1],s=50,c='b')\n",
    "plt.xlabel(r.columns[0])\n",
    "plt.ylabel(r.columns[1])\n",
    "#plt.set_zlabel('EPC_Score_Standardized')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Kmean for data standard "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### an example for one kmeans: 3 class "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 439,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4585444559315477"
      ]
     },
     "execution_count": 439,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import pairwise_distances\n",
    "\n",
    "model_kmean = KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, n_clusters=3, n_init=10, n_jobs=1, precompute_distances='auto',random_state=None, tol=0.0001, verbose=0)\n",
    "label = model_kmean.fit(r)\n",
    "model_kmean.cluster_centers_\n",
    "model_kmean_predict1 = model_kmean.predict(r)\n",
    "metrics.silhouette_score(r, label.labels_, metric='euclidean')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### figure 3D -3index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 430,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "single positional indexer is out-of-bounds",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-430-c996af567ff5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0max1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mAxes3D\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0max1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel_kmean_predict\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'viridis'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0max1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_xlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0max1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_ylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1470\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1471\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1472\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1473\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1474\u001b[0m             \u001b[0;31m# we by definition only have the 0th axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   2011\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2012\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2013\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_has_valid_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2014\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2015\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_lowerdim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_has_valid_tuple\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    220\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mIndexingError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Too many indexers'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    221\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 222\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    223\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    224\u001b[0m                 raise ValueError(\"Location based indexing can only have \"\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_validate_key\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1955\u001b[0m             \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1956\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1957\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1958\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1959\u001b[0m             \u001b[0;31m# a tuple should already have been caught by this point\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_validate_integer\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   2007\u001b[0m         \u001b[0ml\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2008\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0ml\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2009\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"single positional indexer is out-of-bounds\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2010\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2011\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mIndexError\u001b[0m: single positional indexer is out-of-bounds"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "ax1 = Axes3D(fig)\n",
    "ax1.scatter(r.iloc[:,0],r.iloc[:,1],r.iloc[:,2],c=model_kmean_predict,s=50,cmap='viridis')\n",
    "ax1.set_xlabel(r.columns[0])\n",
    "ax1.set_ylabel(r.columns[1])\n",
    "ax1.set_zlabel(r.columns[2])\n",
    "#ax1.view_init(20, 0) #view\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### figure 2D -2index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 440,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(*args, **kw)>"
      ]
     },
     "execution_count": 440,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure\n",
    "plt.scatter(r.iloc[:,0],r.iloc[:,1],c=model_kmean_predict1,s=50,cmap='viridis')\n",
    "plt.xlabel(r.columns[0])\n",
    "plt.ylabel(r.columns[1])\n",
    "#plt.set_zlabel('EPC_Score_Standardized')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### apply the 1-9 class "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 441,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.spatial.distance import cdist\n",
    "\n",
    "\n",
    "distortions = []\n",
    "centroid = []\n",
    "evolution = []\n",
    "\n",
    "cla = range(2,10)\n",
    "\n",
    "for i in cla:\n",
    "    model_kmean = KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, n_clusters=i, n_init=10, n_jobs=1, precompute_distances='auto',random_state=None, tol=0.0001, verbose=0)\n",
    "    labels = model_kmean.fit(r)\n",
    "    \n",
    "    model_kmean_predict = model_kmean.predict(r)\n",
    "    #centroids = model_kmean.cluster_centers_\n",
    "    \n",
    "    #Silhouette CoefficientÂ¶\n",
    "    evolution.append(metrics.silhouette_score(r, labels.labels_, metric='euclidean'))\n",
    "    \n",
    "    #centroid\n",
    "    centroid.append(sum(model_kmean.cluster_centers_))\n",
    "    \n",
    "    #elbow\n",
    "    distortions.append(sum(np.min(cdist(r, model_kmean.cluster_centers_, 'euclidean'), axis=1)) / r.shape[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 442,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the elbow\n",
    "plt.subplot(1,2,1)\n",
    "plt.plot(cla, distortions, 'bx-')\n",
    "plt.xlabel('k')\n",
    "plt.ylabel('Distortion')\n",
    "plt.title('The Elbow Method showing the optimal k')\n",
    "#plt.show()\n",
    "\n",
    "# Plot the Silhouette Coefficient\n",
    "plt.subplot(1,2,2)\n",
    "plt.plot(cla, evolution, 'bx-')\n",
    "plt.xlabel('k')\n",
    "plt.ylabel('Distortion')\n",
    "plt.title('The Silhouette Coefficient')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "180px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
